// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Generator.MgmtTypeSpec.Tests.Models;

namespace Azure.Generator.MgmtTypeSpec.Tests
{
    internal partial class EmployeesGetEmployeesAsyncCollectionResultOfT : AsyncPageable<Employee>
    {
        private readonly Employees _client;
        private readonly Guid _subscriptionId;
        private readonly string _resourceGroupName;
        private readonly string _fooName;
        private readonly string _barName;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of EmployeesGetEmployeesAsyncCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The Employees client used to send requests. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="fooName"> The name of the Foo. </param>
        /// <param name="barName"> The name of the Bar. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="fooName"/> or <paramref name="barName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="fooName"/> or <paramref name="barName"/> is an empty string, and was expected to be non-empty. </exception>
        public EmployeesGetEmployeesAsyncCollectionResultOfT(Employees client, Guid subscriptionId, string resourceGroupName, string fooName, string barName, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(fooName, nameof(fooName));
            Argument.AssertNotNullOrEmpty(barName, nameof(barName));

            _client = client;
            _subscriptionId = subscriptionId;
            _resourceGroupName = resourceGroupName;
            _fooName = fooName;
            _barName = barName;
            _context = context;
        }

        /// <summary> Gets the pages of EmployeesGetEmployeesAsyncCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of EmployeesGetEmployeesAsyncCollectionResultOfT as an enumerable collection. </returns>
        public override async IAsyncEnumerable<Page<Employee>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            while (true)
            {
                Response response = await GetNextResponseAsync(pageSizeHint, nextPage).ConfigureAwait(false);
                if (response is null)
                {
                    yield break;
                }
                EmployeeListResult result = EmployeeListResult.FromResponse(response);
                yield return Page<Employee>.FromValues((IReadOnlyList<Employee>)result.Value, nextPage?.AbsoluteUri, response);
                nextPage = result.NextLink;
                if (nextPage == null)
                {
                    yield break;
                }
            }
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private async ValueTask<Response> GetNextResponseAsync(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextGetEmployeesRequest(nextLink, _subscriptionId, _resourceGroupName, _fooName, _barName, _context) : _client.CreateGetEmployeesRequest(_subscriptionId, _resourceGroupName, _fooName, _barName, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("BarResource.GetEmployees");
            scope.Start();
            try
            {
                return await _client.Pipeline.ProcessMessageAsync(message, _context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
